1) def arrayPairSum(nums):
    nums.sort()  # Sort the array to ensure the minimum elements are paired together
    pair_sum = 0

    for i in range(0, len(nums), 2):
        pair_sum += nums[i]

    return pair_sum
nums = [1, 4, 3, 2]
result = arrayPairSum(nums)
print(result)

2) def distributeCandies(candyType):
    unique_types = len(set(candyType))
    max_limit = len(candyType) // 2

    return min(unique_types, max_limit)
candyType = [1, 1, 2, 2, 3, 3]
result = distributeCandies(candyType)
print(result)

3) def findLHS(nums):
    counts = {}
    max_length = 0

    for num in nums:
        counts[num] = counts.get(num, 0) + 1

    for num in counts:
        if num + 1 in counts:
            length = counts[num] + counts[num + 1]
            max_length = max(max_length, length)

    return max_length
nums = [1, 3, 2, 2, 5, 2, 3, 7]
result = findLHS(nums)
print(result)

4) def canPlaceFlowers(flowerbed, n):
    count = 0
    i = 0

    while i < len(flowerbed):
        if flowerbed[i] == 0 and (i == 0 or flowerbed[i - 1] == 0) and (i == len(flowerbed) - 1 or flowerbed[i + 1] == 0):
            flowerbed[i] = 1
            count += 1
        i += 1

    return count >= n
flowerbed = [1, 0, 0, 0, 1]
n = 1
result = canPlaceFlowers(flowerbed, n)
print(result)

5) def maximumProduct(nums):
    nums.sort()

    return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])
nums = [1, 2, 3]
result = maximumProduct(nums)
print(result)

6) def search(nums, target):
    left = 0
    right = len(nums) - 1

    while left <= right:
        mid = (left + right) // 2

        if nums[mid] == target:
            return mid
        elif nums[mid] < target:
            left = mid + 1
        else:
            right = mid - 1

    return -1
nums = [-1, 0, 3, 5, 9, 12]
target = 9
result = search(nums, target)
print(result)

7) def isMonotonic(nums):
    n = len(nums)
    increasing = nums[0] <= nums[n - 1]

    for i in range(1, n):
        if (increasing and nums[i - 1] > nums[i]) or (not increasing and nums[i - 1] < nums[i]):
            return False

    return True
nums = [1, 2, 2, 3]
result = isMonotonic(nums)
print(result)

8) def minimumDifference(nums, k):
    max_num = max(nums)
    min_num = min(nums)

    if max_num - min_num <= 2 * k:
        return max_num - min_num

    return min(max_num - min_num - 2 * k, max(nums) - min(nums) - 2 * k)
nums = [1]
k = 0
result = minimumDifference(nums, k)
print(result)