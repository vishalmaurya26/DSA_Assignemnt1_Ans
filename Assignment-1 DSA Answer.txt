1) def twoSum(nums, target):
    num_dict = {}  # dictionary to store the numbers and their indices
    
    for i, num in enumerate(nums):
        complement = target - num
        if complement in num_dict:
            return [num_dict[complement], i]
        num_dict[num] = i

    return []  # return an empty list if no solution is found

nums = [2, 7, 11, 15]
target = 9
result = twoSum(nums, target)
print(result)


2) def removeElement(nums, val):
    i = 0  # pointer for elements not equal to val

    for j in range(len(nums)):
        if nums[j] != val:
            nums[i] = nums[j]
            i += 1

    return i
nums = [3, 2, 2, 3]
val = 3
result = removeElement(nums, val)
print(result)
print(nums)

3) def searchInsert(nums, target):
    left, right = 0, len(nums) - 1

    while left <= right:
        mid = left + (right - left) // 2

        if nums[mid] == target:
            return mid
        elif nums[mid] < target:
            left = mid + 1
        else:
            right = mid - 1

    return left
nums = [1, 3, 5, 6]
target = 5
result = searchInsert(nums, target)
print(result)

4) def plusOne(digits):
    n = len(digits)
    for i in range(n - 1, -1, -1):
        if digits[i] < 9:
            digits[i] += 1
            return digits
        digits[i] = 0

    # If all digits are 9, add an extra digit with a value of 1 at the beginning
    digits.insert(0, 1)
    return digits
digits = [1, 2, 3]
result = plusOne(digits)
print(result)

5) def merge(nums1, m, nums2, n):
    p1 = m - 1  # pointer for nums1
    p2 = n - 1  # pointer for nums2
    p = m + n - 1  # pointer for the merged array

    while p1 >= 0 and p2 >= 0:
        if nums1[p1] > nums2[p2]:
            nums1[p] = nums1[p1]
            p1 -= 1
        else:
            nums1[p] = nums2[p2]
            p2 -= 1
        p -= 1

    # If there are remaining elements in nums2, copy them to nums1
    nums1[:p2 + 1] = nums2[:p2 + 1]

    return nums1
nums1 = [1, 2, 3, 0, 0, 0]
m = 3
nums2 = [2, 5, 6]
n = 3
result = merge(nums1, m, nums2, n)
print(result)

6) def containsDuplicate(nums):
    num_set = set()

    for num in nums:
        if num in num_set:
            return True
        num_set.add(num)

    return False
nums = [1, 2, 3, 1]
result = containsDuplicate(nums)
print(result)

7) def moveZeroes(nums):
    left = 0

    for right in range(len(nums)):
        if nums[right] != 0:
            nums[left], nums[right] = nums[right], nums[left]
            left += 1

    return nums
nums = [0, 1, 0, 3, 12]
result = moveZeroes(nums)
print(result)

8) def findErrorNums(nums):
    num_set = set()
    duplicate = -1
    missing = -1

    for num in nums:
        if num in num_set:
            duplicate = num
        num_set.add(num)

    for i in range(1, len(nums) + 1):
        if i not in num_set:
            missing = i
            break

    return [duplicate, missing]
nums = [1, 2, 2, 4]
result = findErrorNums(nums)
print(result)




